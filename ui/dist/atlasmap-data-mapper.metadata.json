{"__symbolic":"module","version":3,"metadata":{"DataMapperModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule"},"arguments":[{"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule"},{"__symbolic":"reference","module":"@angular/http","name":"HttpModule"},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule"},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ngx-bootstrap","name":"TypeaheadModule"},"member":"forRoot"}},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ngx-bootstrap","name":"TooltipModule"},"member":"forRoot"}},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ngx-bootstrap","name":"BsDropdownModule"},"member":"forRoot"}}],"declarations":[{"__symbolic":"reference","name":"DataMapperAppComponent"},{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","name":"ɵd"},{"__symbolic":"reference","name":"ɵg"},{"__symbolic":"reference","name":"ɵh"},{"__symbolic":"reference","name":"ɵi"},{"__symbolic":"reference","name":"ɵj"},{"__symbolic":"reference","name":"ɵk"},{"__symbolic":"reference","name":"ɵl"},{"__symbolic":"reference","name":"ɵm"},{"__symbolic":"reference","name":"ɵn"},{"__symbolic":"reference","name":"ɵp"},{"__symbolic":"reference","name":"ɵo"},{"__symbolic":"reference","name":"ɵq"},{"__symbolic":"reference","name":"ɵr"},{"__symbolic":"reference","name":"ɵf"},{"__symbolic":"reference","name":"ɵs"},{"__symbolic":"reference","name":"ɵt"},{"__symbolic":"reference","name":"ɵu"},{"__symbolic":"reference","name":"ɵv"},{"__symbolic":"reference","name":"ɵw"},{"__symbolic":"reference","name":"ɵy"},{"__symbolic":"reference","name":"ɵx"},{"__symbolic":"reference","name":"ɵz"},{"__symbolic":"reference","name":"ɵba"}],"exports":[{"__symbolic":"reference","name":"ɵh"},{"__symbolic":"reference","name":"ɵg"},{"__symbolic":"reference","name":"DataMapperAppComponent"}],"providers":[{"__symbolic":"reference","name":"DocumentManagementService"},{"__symbolic":"reference","name":"MappingManagementService"},{"__symbolic":"reference","name":"ErrorHandlerService"},{"__symbolic":"reference","name":"InitializationService"}],"entryComponents":[{"__symbolic":"reference","name":"ɵp"},{"__symbolic":"reference","name":"ɵr"},{"__symbolic":"reference","name":"ɵf"},{"__symbolic":"reference","name":"ɵs"},{"__symbolic":"reference","name":"ɵt"},{"__symbolic":"reference","name":"ɵu"},{"__symbolic":"reference","name":"ɵv"},{"__symbolic":"reference","name":"ɵba"}],"bootstrap":[{"__symbolic":"reference","name":"ɵh"}]}]}],"members":{}},"ErrorHandlerService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{"debug":[{"__symbolic":"method"}],"info":[{"__symbolic":"method"}],"warn":[{"__symbolic":"method"}],"error":[{"__symbolic":"method"}],"validationError":[{"__symbolic":"method"}],"removeError":[{"__symbolic":"method"}],"clearValidationErrors":[{"__symbolic":"method"}],"addError":[{"__symbolic":"method"}],"arrayDoesNotContainError":[{"__symbolic":"method"}],"addValidationError":[{"__symbolic":"method"}]}},"DocumentManagementService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/http","name":"Http"}]}],"initialize":[{"__symbolic":"method"}],"fetchClassPath":[{"__symbolic":"method"}],"fetchDocument":[{"__symbolic":"method"}],"createDocumentFetchRequest":[{"__symbolic":"method"}],"parseDocumentResponse":[{"__symbolic":"method"}],"extractJSONDocumentDefinitionFromInspectionResponse":[{"__symbolic":"method"}],"extractJSONDocumentDefinition":[{"__symbolic":"method"}],"extractXMLDocumentDefinitionFromInspectionResponse":[{"__symbolic":"method"}],"extractXMLDocumentDefinition":[{"__symbolic":"method"}],"extractJavaDocumentDefinitionFromInspectionResponse":[{"__symbolic":"method"}],"extractJavaDocumentDefinition":[{"__symbolic":"method"}],"parseJSONFieldFromDocument":[{"__symbolic":"method"}],"parseFieldFromDocument":[{"__symbolic":"method"}],"parseXMLFieldFromDocument":[{"__symbolic":"method"}],"parseJavaFieldFromDocument":[{"__symbolic":"method"}],"handleError":[{"__symbolic":"method"}]},"statics":{"generateMockJSONDoc":{"__symbolic":"function","parameters":[],"value":{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"DocumentManagementService"},"member":"generateMockJSONInstanceDoc"}}}}},"MappingManagementService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/http","name":"Http"}]}],"initialize":[{"__symbolic":"method"}],"findMappingFiles":[{"__symbolic":"method"}],"fetchMappings":[{"__symbolic":"method"}],"saveCurrentMapping":[{"__symbolic":"method"}],"serializeMappingsToJSON":[{"__symbolic":"method"}],"saveMappingToService":[{"__symbolic":"method"}],"handleMappingSaveSuccess":[{"__symbolic":"method"}],"removeMapping":[{"__symbolic":"method"}],"removeMappedPair":[{"__symbolic":"method"}],"addMappedPair":[{"__symbolic":"method"}],"updateMappedField":[{"__symbolic":"method"}],"fieldSelected":[{"__symbolic":"method"}],"addNewMapping":[{"__symbolic":"method"}],"selectMapping":[{"__symbolic":"method"}],"deselectMapping":[{"__symbolic":"method"}],"validateMappings":[{"__symbolic":"method"}],"fetchFieldActions":[{"__symbolic":"method"}],"sortFieldActionConfigs":[{"__symbolic":"method"}],"notifyMappingUpdated":[{"__symbolic":"method"}],"handleError":[{"__symbolic":"method"}]}},"InitializationService":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable"}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"DocumentManagementService"},{"__symbolic":"reference","name":"MappingManagementService"},{"__symbolic":"reference","name":"ErrorHandlerService"}]}],"resetConfig":[{"__symbolic":"method"}],"initialize":[{"__symbolic":"method"}],"fetchDocuments":[{"__symbolic":"method"}],"fetchMappings":[{"__symbolic":"method"}],"fetchFieldActions":[{"__symbolic":"method"}],"updateStatus":[{"__symbolic":"method"}],"handleError":[{"__symbolic":"method"}],"updateLoadingStatus":[{"__symbolic":"method"}]}},"DocumentDefinition":{"__symbolic":"class","members":{"getComplexField":[{"__symbolic":"method"}],"getEnumField":[{"__symbolic":"method"}],"getAllFields":[{"__symbolic":"method"}],"isFieldsExist":[{"__symbolic":"method"}],"getFields":[{"__symbolic":"method"}],"getName":[{"__symbolic":"method"}],"getNamespaceForAlias":[{"__symbolic":"method"}],"getField":[{"__symbolic":"method"}],"getTerminalFields":[{"__symbolic":"method"}],"clearSelectedFields":[{"__symbolic":"method"}],"getSelectedFields":[{"__symbolic":"method"}],"initializeFromFields":[{"__symbolic":"method"}],"updateField":[{"__symbolic":"method"}],"addField":[{"__symbolic":"method"}],"populateChildren":[{"__symbolic":"method"}],"removeField":[{"__symbolic":"method"}],"updateFromMappings":[{"__symbolic":"method"}],"populateFieldParentPaths":[{"__symbolic":"method"}],"populateFieldData":[{"__symbolic":"method"}],"prepareComplexFields":[{"__symbolic":"method"}],"discoverComplexFields":[{"__symbolic":"method"}],"printDocumentFields":[{"__symbolic":"method"}]},"statics":{"noneField":null}},"MappingDefinition":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor"}],"templateExists":[{"__symbolic":"method"}],"addTable":[{"__symbolic":"method"}],"getTableByName":[{"__symbolic":"method"}],"detectTableIdentifiers":[{"__symbolic":"method"}],"getTableBySourceTarget":[{"__symbolic":"method"}],"getTables":[{"__symbolic":"method"}],"getFirstMappingForLookupTable":[{"__symbolic":"method"}],"removeStaleMappings":[{"__symbolic":"method"}],"isMappingStale":[{"__symbolic":"method"}],"initializeMappingLookupTable":[{"__symbolic":"method"}],"updateMappingsFromDocuments":[{"__symbolic":"method"}],"updateDocumentNamespacesFromMappings":[{"__symbolic":"method"}],"getAllMappings":[{"__symbolic":"method"}],"findMappingsForField":[{"__symbolic":"method"}],"removeMapping":[{"__symbolic":"method"}],"removeFieldFromAllMappings":[{"__symbolic":"method"}],"updateMappedFieldsFromDocuments":[{"__symbolic":"method"}]}},"ConfigModel":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor"}],"addJavaDocument":[{"__symbolic":"method"}],"addJSONDocument":[{"__symbolic":"method"}],"addJSONInstanceDocument":[{"__symbolic":"method"}],"addJSONSchemaDocument":[{"__symbolic":"method"}],"addXMLInstanceDocument":[{"__symbolic":"method"}],"addXMLSchemaDocument":[{"__symbolic":"method"}],"getDocsWithoutPropertyDoc":[{"__symbolic":"method"}],"getDocs":[{"__symbolic":"method"}],"hasJavaDocuments":[{"__symbolic":"method"}],"isClassPathResolutionNeeded":[{"__symbolic":"method"}],"getDocForShortIdentifier":[{"__symbolic":"method"}],"getFirstXmlDoc":[{"__symbolic":"method"}],"getAllDocs":[{"__symbolic":"method"}],"documentsAreLoaded":[{"__symbolic":"method"}],"createDocument":[{"__symbolic":"method"}]},"statics":{"mappingServicesPackagePrefix":"io.atlasmap.v2","javaServicesPackagePrefix":"io.atlasmap.java.v2","cfg":{"__symbolic":"new","expression":{"__symbolic":"reference","name":"ConfigModel"}},"getConfig":{"__symbolic":"function","parameters":[],"value":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"ConfigModel"},"member":"cfg"}}}},"MappingModel":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor"}],"getFirstFieldMapping":[{"__symbolic":"method"}],"getLastFieldMapping":[{"__symbolic":"method"}],"getCurrentFieldMapping":[{"__symbolic":"method"}],"addValidationError":[{"__symbolic":"method"}],"clearValidationErrors":[{"__symbolic":"method"}],"getValidationErrors":[{"__symbolic":"method"}],"getValidationWarnings":[{"__symbolic":"method"}],"removeError":[{"__symbolic":"method"}],"getFirstCollectionField":[{"__symbolic":"method"}],"isCollectionMode":[{"__symbolic":"method"}],"isLookupMode":[{"__symbolic":"method"}],"removeMappedPair":[{"__symbolic":"method"}],"getMappedFields":[{"__symbolic":"method"}],"isFieldSelectable":[{"__symbolic":"method"}],"getFieldSelectionExclusionReason":[{"__symbolic":"method"}],"isFieldMapped":[{"__symbolic":"method"}],"getAllMappedFields":[{"__symbolic":"method"}],"getAllFields":[{"__symbolic":"method"}],"getFields":[{"__symbolic":"method"}],"hasMappedFields":[{"__symbolic":"method"}],"hasFullyMappedPair":[{"__symbolic":"method"}]}},"MappingSerializer":{"__symbolic":"class","members":{}},"DataMapperAppComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"data-mapper","moduleId":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"module"},"member":"id"},"encapsulation":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewEncapsulation"},"member":"None"},"template":"\n      <div class=\"DataMapperUI\">\n          <!-- <div class=\"DataMapperUIBackground\"></div> -->\n          <!-- <div class=\"DataMapperUIBackgroundCover\"></div> -->\n          <div [attr.class]=\"getConfig().initCfg.initialized ? 'dataMapperBody' : 'dataMapperBodyHidden'\">\n              <div class=\"row\">\n                  <data-mapper-error #errorPanel [isValidation]=\"false\" [errorService]=\"getConfig().errorService\"></data-mapper-error>\n              </div>\n              <div class=\"row\" style=\"min-height:0px;\"><modal-window #modalWindow [cfg]=\"getConfig()\"></modal-window></div>\n              <div class=\"row\">\n                  <dm-toolbar #toolbarComponent [cfg]=\"getConfig()\" [lineMachine]=\"lineMachine\" [modalWindow]=\"modalWindow\"></dm-toolbar>\n              </div>\n              <div class=\"row\" style=\"height:calc(100% - 32px); position:relative; padding-top:10px;\">\n                  <div style='height:100%; padding:0;' [attr.class]=\"(getConfig().showMappingTable || getConfig().showNamespaceTable) ? 'col-md-9 hidden' : 'col-md-9'\">\n                      <div style=\"float:left; width:40%; height:100%;\">\n                          <document-definition #docDefInput [cfg]=\"getConfig()\" [modalWindow]=\"modalWindow\"\n                              [isSource]=\"true\" [lineMachine]=\"lineMachine\"></document-definition>\n                      </div>\n                      <div style=\"float:left; width:20%; height:100%; margin-left:-5px; margin-right:-5px;\">\n                          <line-machine #lineMachine [cfg]=\"getConfig()\"\n                              [docDefInput]=\"docDefInput\" [docDefOutput]=\"docDefOutput\"></line-machine>\n                      </div>\n                      <div style=\"float:left; width:40%; height:100%;\">\n                          <document-definition #docDefOutput [cfg]=\"getConfig()\" [modalWindow]=\"modalWindow\"\n                              [isSource]=\"false\" [lineMachine]=\"lineMachine\"></document-definition>\n                      </div>\n                      <div class=\"clear\"></div>\n                  </div>\n                  <div class=\"col-md-9\" style='height:100%; padding:0;' *ngIf=\"getConfig().showMappingTable\">\n                      <mapping-list [cfg]=\"getConfig()\"></mapping-list>\n                  </div>\n                  <div class=\"col-md-9\" style='height:100%; padding:0;' *ngIf=\"getConfig().showNamespaceTable\">\n                      <namespace-list [cfg]=\"getConfig()\" [modalWindow]=\"modalWindow\"></namespace-list>\n                  </div>\n\n                  <div class=\"col-md-3\" style=\"padding:0px; height:100%;\">\n                      <mapping-detail #mappingDetailComponent [cfg]=\"getConfig()\" [modalWindow]=\"modalWindow\"></mapping-detail>\n                  </div>\n              </div>\n          </div>\n          <div class=\"DataMapperLoadingMessage\" *ngIf=\"!getConfig().initCfg.initialized\">\n              <label [attr.class]=\"getConfig().initCfg.initializationErrorOccurred ? 'error' : ''\">{{ loadingStatus }}</label>\n              <span class=\"spinner spinner-xs spinner-inline\" *ngIf=\"!getConfig().initCfg.initializationErrorOccurred\"></span>\n          </div>\n      </div>\n    ","styles":["\n      /*\n          Copyright (C) 2017 Red Hat, Inc.\n\n          Licensed under the Apache License, Version 2.0 (the \"License\");\n          you may not use this file except in compliance with the License.\n          You may obtain a copy of the License at\n\n                  http://www.apache.org/licenses/LICENSE-2.0\n\n          Unless required by applicable law or agreed to in writing, software\n          distributed under the License is distributed on an \"AS IS\" BASIS,\n          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          See the License for the specific language governing permissions and\n          limitations under the License.\n      */\n\n      /* general data mapper wide styles */\n      .DataMapperUI { height:100%; width:100%; position:relative; }\n\n      .DataMapperUI .tooltip-inner { max-width:600px; color:white; }\n      .DataMapperUI .clear { clear:both; height:0px; }\n\n      .DataMapperUI .hidden { visibility:hidden; }\n\n      .DataMapperUI I { display:inline-block; }\n      .DataMapperUI I.link:hover, .DataMapperUI I.selected { color:#5CBADF; cursor:pointer; }\n      .DataMapperUI I.selectedIcon { color:#5CBADF; }\n      .DataMapperUI LABEL { font-weight:normal; }\n      .DataMapperUI A:hover { color:#0088ce; cursor:pointer; text-decoration:none; }\n      .DataMapperUI input[disabled] { color:rgb(175,175,175); }\n\n      .DataMapperUI .form-group { margin-left:auto; margin-right:auto; margin-bottom:10px; margin-top:10px; }\n      .DataMapperUI .form-group LABEL { width:75px; }\n      .DataMapperUI .form-group LABEL.disabled { color:rgb(175,175,175); }\n      .DataMapperUI .form-group SELECT { width:100px; }\n\n      .DataMapperUI .modal-body { max-height:400px; overflow:auto; overflow-x:hidden; margin-bottom:5px; }\n      .DataMapperUI .row { margin:0px; }\n\n      .DataMapperUI .card-pf { margin:0; padding-left:0; padding-right:0; height:100%;\n          -webkit-animation-name:dm-fade-in; -webkit-animation-duration:0.4s;\n          animation-name:dm-fade-in; animation-duration:0.4s; }\n      .DataMapperUI .dm-swipe-left { -webkit-animation-name:dm-swipe-left; -webkit-animation-duration:0.4s;\n          animation-name:dm-swipe-left; animation-duration:0.4s; }\n      .DataMapperUI .dm-swipe-right { -webkit-animation-name:dm-swipe-right; -webkit-animation-duration:0.4s;\n          animation-name:dm-swipe-right; animation-duration:0.4s; }\n      .DataMapperUI .card-pf-title { font-size:20px; padding:0px 12px; }\n      .DataMapperUI .card-pf-heading { margin:0; padding:0; }\n      .DataMapperUI .card-pf-body { padding:0px; margin:0px; }\n\n      .DataMapperUI .alert { margin-bottom:5px; }\n      .DataMapperUI .alert .close { font-size:18px; color:#888888; }\n\n      @-webkit-keyframes dm-fade-in { from {opacity:0} to {opacity:1} }\n      @keyframes dm-fade-in { from {opacity:0} to {opacity:1} }\n\n      @-webkit-keyframes dm-fade-out { from {opacity:1} to {opacity:0} }\n      @keyframes dm-fade-out { from {opacity:1} to {opacity:0} }\n\n      @-webkit-keyframes dm-swipe-right { from {margin-left:-100%;} to {margin-left:0%;} }\n      @keyframes dm-swipe-right { from {margin-left:-100%;} to {margin-left:0%;} }\n\n      @-webkit-keyframes dm-swipe-left { from {margin-left:0%;} to {margin-left:-100%;} }\n      @keyframes dm-swipe-left { from {margin-left:0%;} to {margin-left:-100%;} }\n\n      /* background styles */\n      .DataMapperUIBackgroundCover { height:100%; width:100%; position:absolute; top:0px; left:0px;\n          background-image:url('/assets/dm/images/arrow_background.png'); background-repeat:repeat; opacity:0.15; }\n      .DataMapperUIBackground { height:100%; width:100%; position:absolute; top:0px; left:0px; background-color:#4E5258; }\n      .DataMapperUIBackground, .DataMapperUIBackgroundCover { display:none; background-image:none; }\n\n      /* loading screen styles */\n      .dataMapperBodyHidden { visibility:hidden; position:relative; height:0px; }\n      .dataMapperBody { visibility:visible; height:100%; position:relative; }\n      .DataMapperLoadingMessage { position:absolute; height:100%; top:0%; left:0%; padding-top:20%; width:100%; text-align:center; }\n      .DataMapperLoadingMessage .error { color:crimson; }\n      .DataMapperLoadingMessage .spinner { vertical-align:text-bottom; }\n      .DataMapperLoadingMessage LABEL { vertical-align:text-top; margin-right:3px; }\n      .DataMapperLoadingMessage IMG { height:12px; width:12px; vertical-align:middle; }\n\n      /* toolbar styles */\n      .dm-toolbar { margin:1px 0px; padding:10px; }\n      .dm-toolbar .dm-toolbar-icons I { font-size:20px; margin-left:10px; vertical-align:middle; }\n      .dm-toolbar .dropdown-menu { margin-top:5px; }\n      .dm-toolbar .dropdown-menu LI { background-color:transparent; width:200px; }\n      .dm-toolbar .dropdown-menu LI A { color:rgb(54,54,54); }\n      .dm-toolbar .dropdown-menu LI I { color:rgb(54,54,54); font-size:10px; margin-right:10px;\n              vertical-align:baseline; }\n      .dm-toolbar .dropdown-menu LI I.fa-check { margin-top:3px; }\n      .dm-toolbar .dropdown-menu LI:hover { background-color:rgba(92, 186, 223, 0.75); }\n      .dm-toolbar .dropdown-menu LI:hover A { }\n      .dm-toolbar .dropdown-menu LI:hover I { }\n\n      /* document cards */\n      .docDef { position:relative; border:1px solid #CAC9C9; height:100%; background-color:white; overflow:hidden; }\n      .docDef .docName { overflow:hidden; display:inline-block; width:calc(100% - 45px); margin-left:3px; float:left; }\n      .docDef .docName I { margin-right:5px; vertical-align:baseline; margin-bottom:4px; }\n      .docDef I.searchBoxIcon { float:right; }\n      .searchBox { position:relative; }\n      .searchBox INPUT { width:100%; border:1px solid #FBFBFB; border-bottom:1px solid #CAC9C9; padding:5px 10px; float:left;}\n      .searchBox INPUT:placeholder-shown { font-style:italic; }\n      .searchBoxCloseIcon { position:absolute; right:10px; top:10px; }\n      .docDef .fieldList { height:calc(100% - 90px); }\n      .docDef .fieldListSearchOpen { height:calc(100% - 122px); }\n      .docDef .fieldsCount { padding:5px; font-size:10px; font-weight:bold;\n          text-align:right; margin:0; width:100%; border-top:1px solid #CAC9C9; padding-right:12px;\n          border-bottom:0px solid black; }\n      .docDef .documentHeader { color:white; background-image:-webkit-gradient(linear, left top, left bottom, from(rgb(125,125,125)), to(rgb(54,54,54))); background-image:linear-gradient(to bottom, rgb(125,125,125), rgb(54,54,54));\n          font-size:16px; padding-top:5px; margin:0px; overflow:hidden; }\n      .docDef .documentHeader I.link:hover { color:rgb(54,54,54); }\n      I.docCollapseIcon { width:10px; margin-left:5px; }\n\n      .noSearchResults { width:100%; padding:10px; text-align:center; }\n\n      .DocumentFieldDetailComponent { width:100%; margin:0px; }\n      .DocumentFieldDetailComponent .fieldDetail { padding:5px 10px; border-bottom:1px solid #d1d1d1; }\n      .DocumentFieldDetailComponent LABEL { padding:0; margin:0; margin-bottom:1px; vertical-align:middle; }\n      .DocumentFieldDetailComponent .selectedField { background-color:#02A2D8; color:white; }\n      .DocumentFieldDetailComponent .selectedField I { color:white; }\n      .DocumentFieldDetailComponent .dragHover { background-color:#02A2D8; color:white; }\n      .DocumentFieldDetailComponent .dragHover I { color:white; }\n      .docDef .DocumentFieldDetailComponent I { text-shadow:0 1px 2px rgba(3, 3, 3, 0.24); margin-right:2px; font-size:10px; }\n      .DocumentFieldDetailComponent I.partOfMappingIcon { color:#0088ce; }\n      .DocumentFieldDetailComponent I.arrow { text-shadow:none; width:8px; font-size:14px; margin-bottom:2px; margin-right:3px; }\n      .DocumentFieldDetailComponent I.parentFolder { color:#363636; text-shadow:none; margin-right:2px; font-size:12px; }\n      .DocumentFieldDetailComponent .selectedField I.partOfMappingIcon { color:white; }\n      .DocumentFieldDetailComponent I.partOfMappingIconHidden { visibility:hidden; }\n      .DocumentFieldDetailComponent .disableSelection LABEL { text-decoration:line-through; color: rgb(220,220,220); }\n      .DocumentFieldDetailComponent .propertyFieldIcons I { font-size:12px; vertical-align:middle; text-shadow:none; }\n\n      .DataMapperEditComponent INPUT, .DataMapperEditComponent .form-group SELECT { width:300px; }\n      .DataMapperEditComponent .form-group TEXTAREA { margin:auto; }\n\n      .dataMapperItemList  { border:1px solid black; border:1px solid #CAC9C9; margin-right:10px; height:100%; }\n      .dataMapperItemList  LABEL { float:left; margin-bottom:0px; padding-left:5px; }\n      .dataMapperItemList  .items { height:calc(100% - 125px); position:relative; overflow:scroll; overflow-x:hidden;\n          float:left; clear:left; width:100%; }\n      .dataMapperItemList  .items.searchShown { height:calc(100% - 157px); }\n      .dataMapperItemList .item { border-bottom:1px solid #d1d1d1; }\n      .dataMapperItemList .item.even { background-color:rgba(201,201,201,0.10); }\n      .dataMapperItemList .item.active { background-color:#39a5dc; color:white; }\n      .dataMapperItemList .item.active .fieldPath I { color:white; text-shadow:0 1px 2px rgba(54,54,54,0.24); }\n      .dataMapperItemList .searchBox {  }\n\n      .dataMapperItemList .itemCount { padding:5px; font-size:10px; font-weight:bold;\n          text-align:right; margin:0; width:100%; border-top:1px solid #CAC9C9; padding-right:12px;\n          border-bottom:0px solid black; }\n      .dataMapperItemList .itemCount { float:left; clear:left; }\n      .dataMapperItemList .card-pf-title .name { overflow:hidden; display:inline-block; width:calc(100% - 45px); margin-left:3px; float:left; }\n      .dataMapperItemList .card-pf-title .name I { margin-right:5px; vertical-align:baseline; }\n      .dataMapperItemList .card-pf-title .name LABEL { float:none; padding-left:0px; }\n      .dataMapperItemList .card-pf-title { border-bottom:1px solid #CAC9C9; margin:0; padding-top:20px; padding-bottom:20px; }\n      .dataMapperItemList I.searchBoxIcon { float:right; }\n      .dataMapperItemList .rows { border-top:1px solid #d1d1d1; }\n      .dataMapperItemList .rows.searchShown { }\n      .dataMapperItemList .searchHeaderWrapper { width:100%; float:left; clear:left; position:relative; }\n      .dataMapperItemList .rowTitles { background-color:white; width:calc(100% - 0px); overflow:scroll; overflow-x:hidden; padding: 2px 6px; }\n      .dataMapperItemList .rowTitles.searchShown { }\n      .dataMapperItemList .rowTitles LABEL { width:calc(40% - 20px); padding:5px 5px; float:left; margin-bottom:0px; }\n      .dataMapperItemList .rowTitles LABEL I { margin-right:5px; vertical-align:baseline; text-shadow: 0 1px 2px rgba(3, 3, 3, 0.24); }\n      .dataMapperItemList .itemRow { padding:5px 6px;}\n      .dataMapperItemList .noSearchResults { font-weight:bolder; font-size:14px; text-align:center; padding:30px; }\n      .dataMapperItemList .noSearchResults LABEL { float:none; }\n\n      .mappingList .fieldNames { float:left; width:calc(40% - 20px);  }\n      .mappingList .targetFieldNames { }\n      .mappingList .fieldPath {  clear:left; }\n      .mappingList .fieldPath I { margin-left:5px; font-size:12px; color:#0088ce; text-shadow: 0 1px 2px rgba(3, 3, 3, 0.24); }\n      .mappingList .transition { float:left; width:calc(15% - 20px); }\n      .mappingList .error { float:right; font-size:14px; }\n      .mappingList .rowTitles LABEL.type { width:calc(15% - 20px); }\n\n      .namespaceList LABEL.alias { width:calc(15% - 0px); }\n      .namespaceList LABEL.uri { width:calc(30% - 0px); }\n      .namespaceList LABEL.locationUri { width:calc(30% - 0px); }\n\n      /* mapping detail panel */\n      .fieldMappingDetail { border-left:1px solid #d1d1d1; height:100%; background-color:#d1d1d1; border:1px solid #CAC9C9; }\n      .fieldMappingDetail .fieldDetail { }\n      .fieldDetailTooltip LABEL { color:white; float:left; clear:left; }\n      .fieldDetailTooltip LABEL.parentObjectName { color:white; font-style:italic; }\n      .fieldDetailTooltip LABEL.parentObjectName I { vertical-align:baseline; }\n      .fieldMappingDetail .fieldDetail INPUT { padding:2px 4px; width:calc(100% - 5px);\n          color: #4d5258; -webkit-box-shadow: inset 0 2px 2px 0 rgba(0, 0, 0, 0.08); box-shadow: inset 0 2px 2px 0 rgba(0, 0, 0, 0.08); border:solid 1px #bbbbbb; }\n      .fieldMappingDetail .fieldDetail .dropdown { width:calc(100% - 71px);}\n      .fieldMappingDetail .fieldDetail .dropdown-menu { padding:0px; width:100%; }\n      .fieldMappingDetail .fieldDetail .dropdown-menu LI A { margin:0px; }\n      .fieldMappingDetail .fieldDetail .dropdown-menu button.dropdown-item { background-color:white;\n              display:block; border:0px solid black; width:100%; text-align:left; }\n      .fieldMappingDetail .fieldDetail .dropdown-menu button.active { background-color:#F5F5F5; }\n      .fieldDetail .parentObjectName { font-style:italic; }\n      .fieldDetail .parentObjectName I { font-size:12px; vertical-align:text-bottom; margin-right:2px; }\n      .fieldMappingDetail I { vertical-align:middle; }\n      .fieldMappingDetail A.button I { margin-right:5px; font-size:10px; }\n      .fieldMappingDetail A.button { margin:10px; margin-left:0px; border:1px solid #02A2D7; padding:5px 10px; border-radius:5px; }\n      .fieldMappingDetail A.button:hover { border:1px solid #363636; }\n      .fieldMappingDetail HR { margin-top:15px; margin-bottom:15px; border-top:1px solid #d1d1d1; }\n      .fieldMappingDetail .sectionHeader { font-weight:bold; }\n      .fieldMappingDetail .fieldMappingDetail-body { height:calc(100% - 65px); overflow:auto; }\n      .fieldMappingDetail A.small-primary { padding:5px 15px; border-radius:1px; border:solid 1px #00659c;\n          background-image:-webkit-gradient(linear, left top, left bottom, from(#39a5dc), to(#0088ce));\n          background-image:linear-gradient(to bottom, #39a5dc, #0088ce); -webkit-box-shadow:0 2px 3px 0 rgba(3, 3, 3, 0.1); box-shadow:0 2px 3px 0 rgba(3, 3, 3, 0.1);\n          text-align:center; color:#ffffff; }\n      .fieldMappingDetail A.small-primary:active { background-image:-webkit-gradient(linear, left top, left bottom, from(#0088ce), to(#39a5dc)); background-image:linear-gradient(to bottom, #0088ce, #39a5dc); }\n      .fieldMappingDetail .collectionSectionContainer { width:100%; overflow:hidden; overflow-y:auto; height:100%; }\n      .fieldMappingDetail .collectionSection { width:200%; }\n      .fieldMappingDetail .collectionSectionLeft { margin-left:-100%; }\n\n      .fieldMappingDetail .alert>.pficon { top:8px; font-size:16px; left:8px; }\n      .fieldMappingDetail .alert { margin:0; border-left-width:0px; border-right-width:0px; padding:5px; }\n      .fieldMappingDetail .alert LABEL { width:calc(100% - 60px); margin-left:28px; margin-bottom:0; }\n      .fieldMappingDetail .alert .close { margin-right:5px; }\n\n      .mappingFieldAction .form-group LABEL { float:left; clear:left; width:30%; }\n      .mappingFieldAction .form-group SELECT { float:left; clear:left; width:calc(100% - 3px); }\n      .mappingFieldAction .form-group INPUT { float:left; width:69%; text-align:right; }\n      .fieldMappingDetail .mappingFieldAction .linkContainer { padding-right:6px; padding-top:15px; padding-bottom:5px; }\n      .mappingFieldAction .actionContainer { -webkit-box-shadow: 0 0 1px 1px rgba(51, 51, 51, 0.25); box-shadow: 0 0 1px 1px rgba(51, 51, 51, 0.25); width:calc(100% - 7px);\n          padding:2px 10px; margin-left:1px; margin-top:15px; }\n\n      .CollapsableCardHeader {  border-top:1px solid #d1d1d1; }\n      .CollapsableCardHeader .card-pf-heading { border-bottom:0; padding-left:5px; }\n      .sources .CollapsableCardHeader .card-pf-heading { border-top:0; }\n      .CollapsableCardHeader .card-pf-title { font-size:16px; }\n      .CollapsableCardHeader I { margin-right:0px; vertical-align:middle; width:24px; font-size:20px; }\n\n      .mappingFieldContainer { padding:0px 14px; }\n      .fieldMappingDetail .linkContainer { width:100%; text-align:right; padding-bottom:15px; }\n\n      .MappingFieldSection { background-color:white; padding:10px; margin:0; margin-bottom:15px; -webkit-box-shadow:0 0 1px 1px rgba(51, 51, 51, 0.25); box-shadow:0 0 1px 1px rgba(51, 51, 51, 0.25); }\n      .MappingFieldSection LABEL { color:#363636; }\n      .MappingFieldSection .fieldDetailTooltip LABEL { color:white; }\n\n      .TransitionSelector LABEL { width:100%; }\n      .TransitionSelector .enumSection LABEL { width:calc(100% - 25px); margin-bottom:0; }\n      .TransitionSelector SELECT { display:block; width:100%; }\n\n      /* modal window */\n      .DataMapperUI .modal { z-index:1000; width:100%; height:100%; overflow:auto; display:block; }\n\n      .DataMapperUI .modal-content { position:fixed; top:50%; left:50%; -webkit-transform:translate(-50%, -50%); transform:translate(-50%, -50%);\n          -webkit-animation-name:dm-animatetop; -webkit-animation-duration:0.8s;\n          animation-name:dm-animatetop; animation-duration:0.8s }\n      .DataMapperUI .modal-footer .btn { margin-left:10px; }\n      .DataMapperUI .modal-footer { margin:0; }\n\n      @-webkit-keyframes dm-animatetop { from {top:-300px; opacity:0}  to {top:50%; opacity:1} }\n      @keyframes dm-animatetop { from {top:-300px; opacity:0} to {top:50%; opacity:1} }\n\n      .DataMapperUI .modal-message { padding:10px 20px; }\n\n      .MappingSelectionComponent { margin-left:20px; margin-right:20px; margin-bottom:10px; width:500px; }\n      .MappingSelectionComponent .MappingSelectionOptions { overflow:auto; max-height:300px; }\n      .MappingSelectionComponent .inputFields,\n          .MappingSelectionComponent .outputFields { width:200px; padding:5px; padding-left:10px; vertical-align:top; }\n\n      .MappingSelectionSection { padding:0px 8px; margin-bottom:5px; border:1px solid #F6F6F6; }\n      .MappingSelectionSection .pathName, .MappingSelectionSection .pathContainer,\n          .MappingSelectionSection .fieldName, .MappingSelectionSection .numberWrapper { display:inline; padding:0; margin:0; float:left; }\n      .MappingSelectionSection .numberWrapper { width:30px; height:30px; text-align:center; color:#fafafa; background-color:#0088ce;\n          border-radius:15px; font-size:16px; margin-right:10px; margin-left:5px; margin-top:15px; }\n      .MappingSelectionSection .number { display:block; font-weight:bold; margin-top:2px; }\n      .SelectedMappingSelectionSection .numberWrapper { background-color:white; color:#0088ce; }\n      .MappingSelectionSection .fieldName { }\n      .MappingSelectionSection .pathName { word-break:break-word; }\n      .MappingSelectionSection .pathContainer { display:inline-block; width:calc(100% - 45px); }\n      .MappingSelectionComponent .odd { background-color:#F6F6F6; }\n\n      .SelectedMappingSelectionSection, .MappingSelectionComponent .SelectedMappingSelectionSection.odd { background-color:#0088ce; color:#fafafa; border-color:#0088ce; }\n\n      .MappingSelectionSection .sourceTargetSection LABEL { display:none; }\n      .MappingSelectionSection .sourceTargetSection I { font-size:16px; margin-right:5px; vertical-align:text-bottom; }\n      .MappingSelectionSection .sourceTargetSection I:hover { color:inherit; }\n\n      .MappingSelectionComponent .pathHeader .pathName, .MappingSelectionComponent .pathHeader,\n          .MappingSelectionComponent .pathHeader .fieldName, { display:inline; padding:0; margin:0; float:left; }\n      .MappingSelectionComponent .pathHeader .pathName { word-break:break-word; }\n      .MappingSelectionComponent .pathHeader { display:inline-block; width:100%; margin-top:2px; margin-bottom:20px; }\n      .MappingSelectionComponent .pathHeader .fieldName { }\n      .MappingSelectionComponent .sourceTargetHeader { font-size:16px; }\n\n      .MappingSelectionComponent .fieldPair { margin-bottom:10px; border-left:1px solid rgb(54, 54, 54); padding-left:5px; margin-top:10px; }\n      .SelectedMappingSelectionSection .fieldPair { border-left-color:rgb(250,250,250); }\n\n      .MappingSelectionComponent BUTTON.addButton I { margin-right:5px; }\n      .MappingSelectionComponent .header { margin-bottom:20px; }\n\n      /* enum lookup table creation */\n      .LookupTableComponent .lookupTableRow { margin:0px 10px 10px 5px; padding:5px 0px; }\n      .LookupTableComponent LABEL { width:150px; margin-right:20px; overflow:hidden; vertical-align:bottom; }\n      .LookupTableComponent SELECT { width:200px; vertical-align:super; }\n    "]}]}],"members":{"lineMachine":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["lineMachine"]}]}],"errorPanel":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["errorPanel"]}]}],"modalWindow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["modalWindow"]}]}],"docDefInput":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["docDefInput"]}]}],"docDefOutput":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["docDefOutput"]}]}],"mappingDetailComponent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["mappingDetailComponent"]}]}],"toolbarComponent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["toolbarComponent"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"}]}],"getConfig":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"updateFromConfig":[{"__symbolic":"method"}]}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"document-definition","template":"\n        <div #documentDefinitionElement class='docDef' *ngIf=\"cfg && cfg.initCfg.initialized\">\n            <div class=\"card-pf\">\n                <div class=\"card-pf-heading\">\n                    <h2 class=\"card-pf-title\">\n                        <div class=\"docName\">\n                            <i class=\"fa {{ isSource ? 'fa-hdd-o' : 'fa-download' }}\"></i>\n                            <label>{{ getSourcesTargetsLabel() }}</label>\n                        </div>\n                        <i (click)=\"toggleSearch()\" [attr.class]=\"getSearchIconCSSClass()\"></i>\n                        <div class=\"clear\"></div>\n                    </h2>\n\n                </div>\n                <div *ngIf=\"searchMode\" class=\"searchBox\">\n                    <input type=\"text\" #searchFilterBox\n                        id=\"search-filter-box\" (keyup)=\"search(searchFilterBox.value)\" placeholder=\"Search\"\n                        [(ngModel)]=\"searchFilter\" />\n                    <i class=\"fa fa-close searchBoxCloseIcon link\" (click)=\"toggleSearch()\"></i>\n                    <div class=\"clear\"></div>\n                </div>\n                <div [attr.class]=\"searchMode ? 'fieldListSearchOpen' : 'fieldList'\" style=\"overflow:auto;\"\n                    (scroll)=\"handleScroll($event)\">\n                    <div *ngFor=\"let docDef of cfg.getDocs(isSource)\" #docDetail class=\"docIdentifier\" [attr.id]='docDef.name'>\n                        <div class=\"card-pf-title documentHeader\" tooltip=\"{{ docDef.fullyQualifiedName }}\" placement=\"bottom\"\n                            *ngIf=\"isDocNameVisible(docDef)\" (click)=\"toggleFieldVisibility(docDef)\">\n                            <div style=\"float:left\">\n                                <i class=\"fa fa-angle-right docCollapseIcon\" *ngIf=\"!docDef.showFields\"></i>\n                                <i class=\"fa fa-angle-down docCollapseIcon\" *ngIf=\"docDef.showFields\"></i>\n                                <i class=\"fa {{ isSource ? 'fa-hdd-o' : 'fa-download' }}\"></i>\n                                <label>{{ docDef.getName(cfg.showTypes) }}</label>\n                            </div>\n                            <div style=\"float:right;\" *ngIf=\"isAddFieldAvailable(docDef)\">\n                                <i class=\"fa fa-plus link\" (click)=\"addField(docDef, $event)\"></i>\n                            </div>\n                            <div class=\"clear\"></div>\n                        </div>\n                        <div *ngIf=\"docDef.showFields\">\n                            <document-field-detail #fieldDetail *ngFor=\"let f of docDef.fields\" [modalWindow]=\"modalWindow\"\n                                [field]=\"f\" [cfg]=\"cfg\" [lineMachine]=\"lineMachine\"></document-field-detail>\n                            <div class=\"FieldDetail\"\n                                *ngIf=\"!searchMode && docDef.initCfg.type.isPropertyOrConstant() && !docDef.fields.length\">\n                                <label style=\"width:100%; padding:5px 16px; margin:0\">\n                                    No {{ docDef.initCfg.type.isProperty() ? 'properties' : 'constants' }} exist.\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"noSearchResults\" *ngIf=\"searchMode && !searchResultsExist\">\n                        <label>No search results.</label>\n                    </div>\n                </div>\n                <div class=\"card-pf-heading fieldsCount\">{{ getFieldCount() }} fields</div>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"isSource":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"lineMachine":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"modalWindow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"documentDefinitionElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["documentDefinitionElement"]}]}],"fieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren"},"arguments":["fieldDetail"]}]}],"docElements":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren"},"arguments":["docDetail"]}]}],"getDocDefElementPosition":[{"__symbolic":"method"}],"getFieldDetailComponent":[{"__symbolic":"method"}],"getElementPosition":[{"__symbolic":"method"}],"getElementPositionForElement":[{"__symbolic":"method"}],"getFieldDetailComponentPosition":[{"__symbolic":"method"}],"getSearchIconCSSClass":[{"__symbolic":"method"}],"getSourcesTargetsLabel":[{"__symbolic":"method"}],"getFieldCount":[{"__symbolic":"method"}],"handleScroll":[{"__symbolic":"method"}],"toggleSearch":[{"__symbolic":"method"}],"addField":[{"__symbolic":"method"}],"isDocNameVisible":[{"__symbolic":"method"}],"toggleFieldVisibility":[{"__symbolic":"method"}],"isAddFieldAvailable":[{"__symbolic":"method"}],"search":[{"__symbolic":"method"}]}},"ɵb":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"simple-mapping","template":"\n        <div class=\"mappingFieldContainer\" *ngIf=\"fieldPair\">\n            <div *ngFor=\"let mappedField of fieldPair.getMappedFields(isSource)\" class=\"MappingFieldSection\">\n                <!-- header label / trash icon -->\n                <div style=\"float:left;\"><label>{{ getTopFieldTypeLabel() }}</label></div>\n                <div style=\"float:right; margin-right:5px;\">\n                    <i class=\"fa fa-trash link\" aria-hidden=\"true\"\n                        (click)=\"removeMappedField(mappedField)\"></i>\n                </div>\n                <div class=\"clear\"></div>\n\n                <mapping-field-detail [fieldPair]=\"fieldPair\" [cfg]=\"cfg\" [isSource]=\"isSource\"\n                    [mappedField]=\"mappedField\"></mapping-field-detail>\n                <mapping-field-action [mappedField]=\"mappedField\" [cfg]=\"cfg\" [isSource]=\"isSource\"\n                    [fieldPair]=\"fieldPair\"></mapping-field-action>\n            </div>\n            <!-- add button -->\n            <div class=\"linkContainer\" *ngIf=\"isAddButtonVisible()\">\n                <a (click)=\"addClicked()\" class=\"small-primary\">{{ getAddButtonLabel() }}</a>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"isSource":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"fieldPair":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"isAddButtonVisible":[{"__symbolic":"method"}],"getTopFieldTypeLabel":[{"__symbolic":"method"}],"getAddButtonLabel":[{"__symbolic":"method"}],"addClicked":[{"__symbolic":"method"}],"removePair":[{"__symbolic":"method"}],"removeMappedField":[{"__symbolic":"method"}]}},"ɵc":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"collection-mapping","template":"\n        <div class=\"collectionSectionContainer\">\n            <div [attr.class]=\"'collectionSection ' + getAnimationCSSClass()\">\n                <!-- collection field pairing detail -->\n                <div style=\"float:left; width:50%; padding-top:10px;\" class=\"mappingFieldContainer\">\n                    <div *ngFor=\"let fieldPair of cfg.mappings.activeMapping.fieldMappings\">\n                        <div class=\"MappingFieldSection\">\n                            <!-- header label / trash icon -->\n                            <div style=\"float:left;\">\n                                <label>Source</label>\n                                <i class=\"fa fa-bolt\" style=\"font-size:12px; vertical-align:baseline;\"\n                                    *ngIf=\"fieldPair.hasTransition()\"></i>\n                            </div>\n                            <div style=\"float:right; margin-right:5px; text-align:right\">\n                                <i class=\"fa fa-edit link\" aria-hidden=\"true\"\n                                    (click)=\"editPair(fieldPair)\"></i>\n                                <i class=\"fa fa-trash link\" aria-hidden=\"true\" (click)=\"removePair(fieldPair)\"></i>\n                            </div>\n                            <div class=\"clear\"></div>\n\n                            <mapping-field-detail *ngFor=\"let mappedField of fieldPair.getMappedFields(true)\"\n                                [mappedField]=\"mappedField\" [fieldPair]=\"fieldPair\" [cfg]=\"cfg\" [isSource]=\"true\"></mapping-field-detail>\n                            <div style=\"float:left;\"><label>Target</label></div>\n                            <div class=\"clear\"></div>\n                            <mapping-field-detail *ngFor=\"let mappedField of fieldPair.getMappedFields(false)\"\n                                [mappedField]=\"mappedField\" [fieldPair]=\"fieldPair\" [cfg]=\"cfg\" [isSource]=\"false\"></mapping-field-detail>\n                        </div>\n                    </div>\n                    <!-- add button -->\n                    <div class=\"linkContainer\">\n                        <a (click)=\"addClicked()\" class=\"small-primary\">Add Mapping</a>\n                    </div>\n                </div>\n                <div style=\"float:left; width:50%; margin:0; padding:0\" *ngIf=\"fieldPairForEditing\">\n                    <div class=\"card-pf-title\">\n                        <div style=\"float:left\">Edit Details</div>\n                        <div style=\"float:right;\">\n                            <i class=\"fa fa-close link\" aria-hidden=\"true\" (click)=\"exitEditMode()\"></i>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                    <mapping-pair-detail [cfg]=\"cfg\" [fieldPair]=\"fieldPairForEditing\"\n                        [modalWindow]=\"modalWindow\"></mapping-pair-detail>\n                </div>\n                <div class=\"clear\"></div>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"getAnimationCSSClass":[{"__symbolic":"method"}],"getFields":[{"__symbolic":"method"}],"addClicked":[{"__symbolic":"method"}],"editPair":[{"__symbolic":"method"}],"exitEditMode":[{"__symbolic":"method"}],"removePair":[{"__symbolic":"method"}]}},"ɵd":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"mapping-pair-detail","template":"\n        <div>\n            <collapsable-header title=\"Sources\" #sourcesHeader class=\"sources\"></collapsable-header>\n            <simple-mapping [cfg]=\"cfg\" [isSource]=\"true\" *ngIf=\"!sourcesHeader.collapsed\"\n                [fieldPair]=\"fieldPair\"></simple-mapping>\n            <collapsable-header title=\"Action\" #actionsHeader></collapsable-header>\n            <transition-selector [cfg]=\"cfg\" [modalWindow]=\"modalWindow\"\n                [fieldPair]=\"fieldPair\" *ngIf=\"!actionsHeader.collapsed\"></transition-selector>\n            <collapsable-header title=\"Targets\" #targetsHeader></collapsable-header>\n            <simple-mapping [cfg]=\"cfg\" [isSource]=\"false\" *ngIf=\"!targetsHeader.collapsed\"\n                [fieldPair]=\"fieldPair\"></simple-mapping>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"fieldPair":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"modalWindow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"sourcesHeader":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["sourcesHeader"]}]}],"actionsHeader":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["actionsHeader"]}]}],"targetsHeader":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["targetsHeader"]}]}]}},"ɵe":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"mapping-detail","template":"\n        <div class='fieldMappingDetail' *ngIf=\"cfg.mappings.activeMapping && cfg.showMappingDetailTray\">\n            <div class=\"card-pf\">\n                <div class=\"card-pf-heading\">\n                    <h2 class=\"card-pf-title\">\n                        <div style=\"float:left;\">{{ getTitle() }}</div>\n                        <div style=\"float:right; text-align:right;\">\n                            <i class=\"fa fa-trash link\" aria-hidden=\"true\" (click)=\"removeMapping($event)\"></i>\n                        </div>\n                        <div style=\"clear:both; height:0px;\"></div>\n                    </h2>\n                </div>\n                <div class=\"fieldMappingDetail-body\">\n                    <div class=\"alert alert-danger\" *ngFor=\"let error of cfg.mappings.activeMapping.getValidationErrors()\">\n                        <a class=\"close\" (click)=\"cfg.mappings.activeMapping.removeError(error.identifier)\">\n                            <i class=\"fa fa-close\"></i>\n                        </a>\n                        <span class=\"pficon pficon-error-circle-o\"></span>\n                        <label>{{ error.message }}</label>\n                    </div>\n                    <div class=\"alert alert-warning\" *ngFor=\"let warn of cfg.mappings.activeMapping.getValidationWarnings()\">\n                        <a class=\"close\" (click)=\"cfg.mappings.activeMapping.removeError(warn.identifier)\">\n                            <i class=\"fa fa-close\"></i>\n                        </a>\n                        <span class=\"pficon pficon-warning-triangle-o\"></span>\n                        <label>{{ warn.message }}</label>\n                    </div>\n                    <div *ngIf=\"!isMappingCollection()\">\n                        <mapping-pair-detail *ngFor=\"let fieldPair of cfg.mappings.activeMapping.fieldMappings\"\n                            [cfg]=\"cfg\" [fieldPair]=\"fieldPair\" [modalWindow]=\"modalWindow\"></mapping-pair-detail>\n                    </div>\n                    <collection-mapping [cfg]=\"cfg\" *ngIf=\"isMappingCollection()\"></collection-mapping>\n                </div>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"modalWindow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"ngOnInit":[{"__symbolic":"method"}],"isMappingCollection":[{"__symbolic":"method"}],"getTitle":[{"__symbolic":"method"}],"removeMapping":[{"__symbolic":"method"}],"selectMapping":[{"__symbolic":"method"}]}},"ɵf":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"empty-modal-body","template":""}]}],"members":{}},"ɵg":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"modal-window","template":"\n        <div id=\"modalWindow\" [attr.class]=\"visible ? 'modal fade in' : 'modal fade dm-out'\" *ngIf=\"visible\">\n            <div class=\"modalWindow\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <a (click)=\"closeClicked($event)\"><span class='close'><i class=\"fa fa-close\"></i></span></a>\n                        {{ headerText }}\n                    </div>\n                    <div class=\"modal-error\">\n                        <data-mapper-error [isValidation]=\"true\" [errorService]=\"cfg.errorService\"></data-mapper-error>\n                    </div>\n                    <div class=\"modal-body\">\n                        <div class=\"modal-message\" *ngIf=\"message\">{{ message }}</div>\n                        <ng-template #dyn_target></ng-template>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <div class=\"modal-buttons\">\n                            <button class=\"pull-right btn btn-primary\" (click)=\"buttonClicked(true)\">{{ confirmButtonText }}</button>\n                            <button class=\"pull-right btn btn-cancel\" (click)=\"buttonClicked(false)\">Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    "}]}],"members":{"headerText":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"nestedComponentType":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"nestedComponentInitializedCallback":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"okButtonHandler":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"cancelButtonHandler":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"myTarget":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren"},"arguments":["dyn_target",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ViewContainerRef"}}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ComponentFactoryResolver"},{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"}]}],"ngAfterViewInit":[{"__symbolic":"method"}],"loadComponent":[{"__symbolic":"method"}],"closeClicked":[{"__symbolic":"method"}],"close":[{"__symbolic":"method"}],"show":[{"__symbolic":"method"}],"reset":[{"__symbolic":"method"}],"buttonClicked":[{"__symbolic":"method"}]}},"ɵh":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"data-mapper-example-host","template":"\n        <data-mapper #dataMapperComponent></data-mapper>\n    ","providers":[{"__symbolic":"reference","name":"MappingManagementService"},{"__symbolic":"reference","name":"ErrorHandlerService"},{"__symbolic":"reference","name":"DocumentManagementService"}]}]}],"members":{"dataMapperComponent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["dataMapperComponent"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"InitializationService"}]}],"ngOnInit":[{"__symbolic":"method"}]}},"ɵi":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"mapping-field-action","template":"\n        <div class=\"mappingFieldAction\">\n            <div class=\"actionContainer\" *ngFor=\"let action of getMappedFieldActions(); let actionIndex = index\">\n                <div class=\"form-group\">\n                    <label style=\"float:left;\">{{ getActionDescription(action) }}</label>\n                    <div style=\"float:right; margin-right:5px;\" *ngIf=\"!action.isSeparateOrCombineMode\">\n                        <i class=\"fa fa-trash link\" aria-hidden=\"true\" (click)=\"removeAction(action)\"></i>\n                    </div>\n                    <div class=\"clear\"></div>\n\n                    <select (change)=\"configSelectionChanged($event);\"\n                        [ngModel]=\"action.name\" *ngIf=\"!action.isSeparateOrCombineMode\">\n                        <option *ngFor=\"let actionConfig of getActionConfigs()\"\n                            [attr.actionIndex]=\"actionIndex\"\n                            [attr.value]=\"actionConfig.name\">{{ actionConfig.name }}</option>\n                    </select>\n\n                    <div class=\"clear\"></div>\n                </div>\n                <div class=\"form-group argument\" *ngFor=\"let argConfig of action.config.arguments; let i = index\">\n                    <label style=\"\">{{ argConfig.name }}</label>\n                    <input type=\"text\" id=\"input-index-{{action.getArgumentValue(argConfig.name).value}}\"\n                        [(ngModel)]=\"action.getArgumentValue(argConfig.name).value\" (change)=\"selectionChanged($event)\"/>\n                    <div class=\"clear\"></div>\n                </div>\n            </div>\n            <div *ngIf=\"actionsExistForField() && !isSource\" class=\"linkContainer\">\n                <a (click)=\"addTransformation()\" class=\"small-primary\">Add Transformation</a>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"mappedField":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"isSource":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"fieldPair":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"getMappedFieldActions":[{"__symbolic":"method"}],"getActionDescription":[{"__symbolic":"method"}],"actionsExistForField":[{"__symbolic":"method"}],"getActionConfigs":[{"__symbolic":"method"}],"removeAction":[{"__symbolic":"method"}],"selectionChanged":[{"__symbolic":"method"}],"addTransformation":[{"__symbolic":"method"}],"configSelectionChanged":[{"__symbolic":"method"}]}},"ɵj":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"mapping-field-detail","template":"\n        <!-- our template for type ahead -->\n        <ng-template #typeaheadTemplate let-model=\"item\" let-index=\"index\">\n            <h5 style=\"font-style:italic;\">{{ model['field'].docDef == null ? '' : model['field'].docDef.name }}</h5>\n            <h5>{{ model['field'].path }}</h5>\n        </ng-template>\n\n        <!-- our template for tooltip popover -->\n        <ng-template #tolTemplate>\n            <div class=\"fieldDetailTooltip\">\n                <label class=\"parentObjectName\" *ngIf=\"displayParentObject()\">\n                    <i [attr.class]=\"getSourceIconCSSClass()\"></i>\n                    {{ getParentObjectName() }}\n                </label>\n                <label>{{ getFieldPath() }}</label>\n                <label *ngIf=\"displayParentObject() && mappedField.field.type\">({{ mappedField.field.type }})</label>\n                <div class=\"clear\"></div>\n            </div>\n        </ng-template>\n\n        <div class='fieldDetail' style=\"margin-bottom:5px;\" *ngIf=\"mappedField\"\n            [tooltip]=\"tolTemplate\" placement=\"left\">\n            <label class=\"parentObjectName\" *ngIf=\"displayParentObject()\">\n                <i [attr.class]=\"getSourceIconCSSClass()\"></i>\n                {{ getParentObjectName() }}\n            </label>\n            <div style=\"width:100%;\">\n                <input type=\"text\" id=\"input-{{isSource?'source':'target'}}-{{mappedField.field.getFieldLabel(false)}}\"\n                    [ngModel]=\"mappedField.field.getFieldLabel(false)\" [typeahead]=\"dataSource\"\n                    typeaheadWaitMs=\"200\" (typeaheadOnSelect)=\"selectionChanged($event)\"\n                    typeaheadOptionField=\"displayName\" [typeaheadItemTemplate]=\"typeaheadTemplate\">\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"fieldPair":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"isSource":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"mappedField":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"__ctor__":[{"__symbolic":"constructor"}],"getFieldPath":[{"__symbolic":"method"}],"getSourceIconCSSClass":[{"__symbolic":"method"}],"displayParentObject":[{"__symbolic":"method"}],"getParentObjectName":[{"__symbolic":"method"}],"selectionChanged":[{"__symbolic":"method"}],"executeSearch":[{"__symbolic":"method"}]}},"ɵk":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"document-field-detail","template":"\n        <div class=\"DocumentFieldDetailComponent\" [attr.id]=\"field.name\" #fieldDetailElement on-mouseover='handleMouseOver($event)'\n            *ngIf=\"fieldShouldBeVisible()\" [attr.draggable]=\"field.isTerminal()\" (dragstart)=\"startDrag($event)\" (drop)=\"endDrag($event)\"\n            (dragenter)=\"dragEnterLeave($event, true)\" (dragleave)=\"dragEnterLeave($event, false)\" (dragover)=\"allowDrop($event)\">\n            <div [attr.class]='getCssClass()' (click)=\"handleMouseClick($event)\" *ngIf=\"field.visibleInCurrentDocumentSearch\">\n                <div style=\"float:left;\">\n                    <div style=\"display:inline-block; width:24px;\" *ngIf=\"!field.isSource()\">\n                        <i [attr.class]='getMappingClass()'></i>\n                        <i [attr.class]='getTransformationClass()'></i>\n                    </div>\n                    <div class=\"spacer\" [attr.style]=\"getSpacerWidth()\">&nbsp;</div>\n                    <div *ngIf=\"!field.isTerminal()\" style=\"display:inline-block;\">\n                        <i [attr.class]=\"getParentToggleClass()\"></i>\n                        <i *ngIf=\"!field.isCollection\" class=\"fa fa-folder parentFolder\"></i>\n                        <i *ngIf=\"field.isCollection\" class=\"fa fa-list-ul parentFolder\"></i>\n                    </div>\n                    <div *ngIf=\"field.isTerminal()\" style=\"display:inline-block;\">\n                        <i [attr.class]=\"getFieldTypeIcon()\"></i>\n                    </div>\n                        <label>{{ field.getFieldLabel(false) }}</label>\n                    </div>\n                    <div style=\"float:right; width:24px; text-align:right;\" *ngIf=\"field.isSource()\">\n                        <i [attr.class]='getTransformationClass()'></i>\n                        <i [attr.class]='getMappingClass()'></i>\n                    </div>\n                    <div class=\"propertyFieldIcons\" style=\"float:right; text-align:right\" *ngIf=\"field.userCreated\">\n                        <i class=\"fa fa-edit link\" aria-hidden=\"true\" (click)=\"editField($event);\"></i>\n                        <i class=\"fa fa-trash link\" aria-hidden=\"true\" (click)=\"removeField($event);\"></i>\n                    </div>\n                    <div class=\"clear\"></div>\n            </div>\n            <div class=\"childrenFields\" *ngIf=\"!field.isTerminal() && !field.collapsed\">\n                <document-field-detail #fieldDetail *ngFor=\"let f of field.children\"\n                    [field]=\"f\" [lineMachine]=\"lineMachine\" [modalWindow]=\"modalWindow\"\n                    [cfg]=\"cfg\"></document-field-detail>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"field":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"lineMachine":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"modalWindow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"fieldDetailElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["fieldDetailElement"]}]}],"fieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren"},"arguments":["fieldDetail"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/platform-browser","name":"DomSanitizer"}]}],"startDrag":[{"__symbolic":"method"}],"dragEnterLeave":[{"__symbolic":"method"}],"allowDrop":[{"__symbolic":"method"}],"endDrag":[{"__symbolic":"method"}],"getFieldTypeIcon":[{"__symbolic":"method"}],"fieldShouldBeVisible":[{"__symbolic":"method"}],"getTransformationClass":[{"__symbolic":"method"}],"getMappingClass":[{"__symbolic":"method"}],"getCssClass":[{"__symbolic":"method"}],"getElementPosition":[{"__symbolic":"method"}],"handleMouseOver":[{"__symbolic":"method"}],"getParentToggleClass":[{"__symbolic":"method"}],"handleMouseClick":[{"__symbolic":"method"}],"getFieldDetailComponent":[{"__symbolic":"method"}],"editField":[{"__symbolic":"method"}],"removeField":[{"__symbolic":"method"}],"getSpacerWidth":[{"__symbolic":"method"}]}},"ɵl":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"data-mapper-error","template":"\n        <div class=\"DataMapperErrorComponent\" *ngIf=\"errorService && getErrors().length\">\n            <div class=\"alert alert-danger\" *ngFor=\"let e of getErrors()\">\n                <a class=\"close\" (click)=\"handleClick($event)\">\n                    <i class=\"fa fa-close\" attr.errorIdentifier=\"{{e.identifier}}\"></i>\n                </a>\n                <span class=\"pficon pficon-error-circle-o\"></span>\n                {{ e.message }}\n            </div>\n            <div class=\"alert alert-warning\" *ngFor=\"let w of getWarnings()\">\n                <a class=\"close\" (click)=\"handleClick($event)\">\n                    <i class=\"fa fa-close\" attr.errorIdentifier=\"{{w.identifier}}\"></i>\n                </a>\n                <span class=\"pficon pficon-warning-triangle-o\"></span>\n                {{ w.message }}\n            </div>\n        </div>\n    "}]}],"members":{"errorService":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"isValidation":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"getErrors":[{"__symbolic":"method"}],"getWarnings":[{"__symbolic":"method"}],"handleClick":[{"__symbolic":"method"}]}},"ɵm":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"transition-selector","template":"\n        <div class=\"mappingFieldContainer TransitionSelector\" *ngIf=\"cfg.mappings.activeMapping\">\n            <div class=\"MappingFieldSection\">\n                <div *ngIf=\"modeIsEnum()\" class=\"enumSection\">\n                    <label>{{ getMappedValueCount() }} values mapped</label>\n                    <i class=\"fa fa-edit link\" (click)=\"showLookupTable()\"></i>\n                </div>\n                <div *ngIf=\"!modeIsEnum()\">\n                    <label>Action</label>\n                    <select  id=\"select-action\" (change)=\"selectionChanged($event);\" selector=\"mode\"\n                        [ngModel]=\"fieldPair.transition.mode\">\n                        <option value=\"{{modes.COMBINE}}\">Combine</option>\n                        <option value=\"{{modes.MAP}}\">Map</option>\n                        <option value=\"{{modes.SEPARATE}}\">Separate</option>\n                    </select>\n                    <div class=\"clear\"></div>\n                </div>\n                <div *ngIf=\"fieldPair.transition.isSeparateMode() || fieldPair.transition.isCombineMode()\" style=\"margin-top:10px;\">\n                    <label>Separator:</label>\n                    <select  id=\"select-separator\" (change)=\"selectionChanged($event);\" selector=\"separator\"\n                        [ngModel]=\"fieldPair.transition.delimiter\">\n                        <option value=\"{{delimeters.COLON}}\">Colon</option>\n                        <option value=\"{{delimeters.COMMA}}\">Comma</option>\n                        <option value=\"{{delimeters.MULTISPACE}}\">Multispace</option>\n                        <option value=\"{{delimeters.SPACE}}\">Space</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"modalWindow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"fieldPair":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectionChanged":[{"__symbolic":"method"}],"modeIsEnum":[{"__symbolic":"method"}],"getMappedValueCount":[{"__symbolic":"method"}],"showLookupTable":[{"__symbolic":"method"}]}},"ɵn":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"line-machine","template":"\n        <div class=\"LineMachineComponent\" #lineMachineElement on-mousemove=\"drawLine($event)\" style=\"height:100%; margin-top:6%;\">\n            <svg style=\"width:100%; height:100%;\">\n                <defs>\n                    <linearGradient id='line-gradient-active' gradientUnits=\"userSpaceOnUse\">\n                        <stop stop-color='#0088ce'/>\n                        <stop offset='100%' stop-color='#0088ce'/> <!-- was #bee1f4 -->\n                    </linearGradient>\n                    <linearGradient id='line-gradient-dormant' gradientUnits=\"userSpaceOnUse\">\n                        <stop stop-color='#8b8d8f'/>\n                        <stop offset='100%' stop-color='#8b8d8f'/> <!-- was #EEEEEE -->\n                    </linearGradient>\n                </defs>\n                <svg:line *ngFor=\"let l of lines\"\n                    [attr.x1]=\"l.sourceX\" [attr.y1]=\"l.sourceY\"\n                    [attr.x2]=\"l.targetX\" [attr.y2]=\"l.targetY\"\n                    shape-rendering=\"optimizeQuality\"\n                    [attr.style]=\"l.style\"></svg:line>\n                <svg:line *ngIf=\"lineBeingFormed && lineBeingFormed.targetY\"\n                    [attr.x1]=\"lineBeingFormed.sourceX\" [attr.y1]=\"lineBeingFormed.sourceY\"\n                    [attr.x2]=\"lineBeingFormed.targetX\" [attr.y2]=\"lineBeingFormed.targetY\"\n                    shape-rendering=\"optimizeQuality\"\n                    [attr.style]=\"lineBeingFormed.style\"></svg:line>\n            </svg>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"docDefInput":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"docDefOutput":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"lineMachineElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["lineMachineElement"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/platform-browser","name":"DomSanitizer"},{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"}]}],"ngOnInit":[{"__symbolic":"method"}],"addLineFromParams":[{"__symbolic":"method"}],"addLine":[{"__symbolic":"method"}],"setLineBeingFormed":[{"__symbolic":"method"}],"clearLines":[{"__symbolic":"method"}],"drawLine":[{"__symbolic":"method"}],"drawCurrentLine":[{"__symbolic":"method"}],"handleDocumentFieldMouseOver":[{"__symbolic":"method"}],"mappingChanged":[{"__symbolic":"method"}],"redrawLinesForMappings":[{"__symbolic":"method"}],"createLineStyle":[{"__symbolic":"method"}],"drawLinesForMapping":[{"__symbolic":"method"}],"getScreenPosForField":[{"__symbolic":"method"}],"checkFieldEligibiltyForLineDrawing":[{"__symbolic":"method"}]}},"ɵo":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"mapping-selection-section","template":"\n        <div [attr.class]=\"getClass()\" (click)=\"handleMouseClick($event)\">\n            <div class=\"numberWrapper\"><div class=\"number\">{{ outputNumber + 1 }}</div></div>\n            <div class=\"pathContainer\">\n                <div class=\"fieldPair\" *ngFor=\"let fieldPair of mapping.fieldMappings\">\n                    <div class=\"sourceTargetSection sourcePaths\">\n                        <label>{{ getSourceTargetLabelText(true, fieldPair) }}</label>\n                        <div class=\"paths\" *ngFor=\"let sourceField of fieldPair.sourceFields\">\n                            <div class=\"path\">\n                                <div class=\"pathName\">\n                                    <i class=\"fa fa-hdd-o\" aria-hidden=\"true\"></i>\n                                    {{ getFormattedOutputPath(sourceField.field.path, false) }}\n                                </div>\n                                <div class=\"fieldName\">{{ getFormattedOutputPath(sourceField.field.path, true) }}</div>\n                                <div class=\"clear\"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"sourceTargetSection targetPaths\">\n                        <label>{{ getSourceTargetLabelText(false, fieldPair) }}</label>\n                        <div class=\"paths\" *ngFor=\"let targetField of fieldPair.targetFields\">\n                            <div class=\"path\">\n                                <div class=\"pathName\">\n                                    <i class=\"fa fa-download\" aria-hidden=\"true\"></i>\n                                    {{ getFormattedOutputPath(targetField.field.path, false) }}\n                                </div>\n                                <div class=\"fieldName\">{{ getFormattedOutputPath(targetField.field.path, true) }}</div>\n                                <div class=\"clear\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"clear\"></div>\n        </div>\n    "}]}],"members":{"outputNumber":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"mapping":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectedCallback":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selected":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"selectedFieldIsSource":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentComponent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"isOddRow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"getClass":[{"__symbolic":"method"}],"getSourceTargetLabelText":[{"__symbolic":"method"}],"getFormattedOutputPath":[{"__symbolic":"method"}],"handleMouseClick":[{"__symbolic":"method"}]}},"ɵp":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"mapping-selection","template":"\n        <div class=\"MappingSelectionComponent\" *ngIf=\"mappings\">\n            <div class=\"header\">\n                <div class=\"sourceTargetHeader\">{{ selectedField.isSource() ? 'Source' : 'Target' }}</div>\n                <div class=\"pathHeader\">\n                    <div class=\"pathName\">{{ getFormattedOutputPath(selectedField.path, false) }}</div>\n                    <div class=\"fieldName\">{{ getFormattedOutputPath(selectedField.path, true) }}</div>\n                    <div class=\"clear\"></div>\n                </div>\n                <div class=\"clear\"></div>\n                <button class=\"btn btn-primary addButton\" (click)=\"addMapping()\">\n                    <i class=\"fa fa-plus\"></i>Add New Mapping\n                </button>\n            </div>\n            <div class=\"MappingSelectionOptions\">\n                <mapping-selection-section *ngFor=\"let mapping of mappings; let i = index; let odd=odd; let even=even;\"\n                    [mapping]=\"mapping\" [outputNumber]=\"i\" [selected]=\"i == 0\" [selectedCallback]=\"selectionChanged\"\n                    [selectedFieldIsSource]=\"selectedField.isSource()\" [parentComponent]=\"this\"\n                    [isOddRow]=\"odd\" #mappingSection>\n                </mapping-selection-section>\n            </div>\n        </div>\n    "}]}],"members":{"sectionComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren"},"arguments":["mappingSection"]}]}],"selectionChanged":[{"__symbolic":"method"}],"getFormattedOutputPath":[{"__symbolic":"method"}],"addMapping":[{"__symbolic":"method"}],"getSelectedMapping":[{"__symbolic":"method"}],"getSelectedMappingComponent":[{"__symbolic":"method"}]}},"ɵq":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"dm-toolbar","template":"\n    <div class=\"dm-toolbar\">\n        <div class=\"dm-toolbar-icons\" style=\"float:right;\">\n            <i class=\"fa fa-plus link\" (click)=\"toolbarButtonClicked('addMapping', $event);\"\n                tooltip=\"Add new mapping\"></i>\n            <i [attr.class]=\"getCSSClass('editTemplate')\"  *ngIf=\"targetSupportsTemplate()\"\n                (click)=\"toolbarButtonClicked('editTemplate', $event);\"></i>\n            <i [attr.class]=\"getCSSClass('showMappingTable')\" (click)=\"toolbarButtonClicked('showMappingTable', $event);\"\n               tooltip=\"Show / hide mapping table\"></i>\n            <i *ngIf=\"cfg.getFirstXmlDoc(false)\" [attr.class]=\"getCSSClass('showNamespaceTable')\"\n                (click)=\"toolbarButtonClicked('showNamespaceTable', $event);\"></i>\n            <i [attr.class]=\"getCSSClass('showDetails')\" (click)=\"toolbarButtonClicked('showDetails', $event);\"\n                tooltip=\"Show / hide mapping details\"></i>\n            <div dropdown placement=\"bottom right\" style=\"display:inline; position:relative;\">\n                <i [attr.class]=\"getCSSClass('advancedMode')\" dropdownToggle (click)=\"false\"\n                    tooltip=\"Editor settings\"></i>\n                <!-- <a href dropdownToggle (click)=\"false\">X</a> -->\n                <ul *dropdownMenu class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\n                    <li role=\"menuitem\" (click)=\"toolbarButtonClicked('showTypes', $event);\">\n                        <div style=\"float:left\">\n                            <a class=\"dropdown-item\" href=\"#\">\n                                <i class=\"fa fa-tag\"></i>Show Types\n                            </a>\n                        </div>\n                        <i class=\"fa fa-check\" *ngIf=\"cfg.showTypes\" style=\"float:right\"></i>\n                        <div class=\"clear\"></div>\n                    </li>\n                    <li role=\"menuitem\" (click)=\"toolbarButtonClicked('showLines', $event);\">\n                        <div style=\"float:left\">\n                            <a class=\"dropdown-item\" href=\"#\">\n                                <i class=\"fa fa-share-alt\"></i>Show Lines\n                            </a>\n                        </div>\n                        <i class=\"fa fa-check\" *ngIf=\"cfg.showLinesAlways\" style=\"float:right\"></i>\n                        <div class=\"clear\"></div>\n                    </li>\n                    <li role=\"menuitem\" (click)=\"toolbarButtonClicked('showMappedFields', $event);\">\n                        <div style=\"float:left\">\n                            <a class=\"dropdown-item\" href=\"#\">\n                                <i class=\"fa fa-chain\"></i>Show Mapped Fields\n                            </a>\n                        </div>\n                        <i class=\"fa fa-check\" *ngIf=\"cfg.showMappedFields\" style=\"float:right\"></i>\n                        <div class=\"clear\"></div>\n                    </li>\n                    <li role=\"menuitem\" (click)=\"toolbarButtonClicked('showUnmappedFields', $event);\">\n                        <div style=\"float:left\">\n                            <a class=\"dropdown-item\" href=\"#\">\n                                <i class=\"fa fa-chain-broken\"></i>Show Unmapped Fields\n                            </a>\n                        </div>\n                        <i class=\"fa fa-check\" *ngIf=\"cfg.showUnmappedFields\" style=\"float:right\"></i>\n                        <div class=\"clear\"></div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n        <div style=\"clear:both; height:0px;\"></div>\n    </div>\n"}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"lineMachine":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"modalWindow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"getCSSClass":[{"__symbolic":"method"}],"targetSupportsTemplate":[{"__symbolic":"method"}],"toolbarButtonClicked":[{"__symbolic":"method"}],"editTemplate":[{"__symbolic":"method"}]}},"ɵr":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"lookup-table","template":"\n        <div class=\"LookupTableComponent\" *ngIf=\"data\">\n            <div class=\"lookupTableRow\" *ngFor=\"let d of data\">\n                <label>{{ d.sourceEnumValue }}</label>\n                <select #outputSelect [ngModel]=\"d.selectedTargetEnumValue\" [attr.sourceValue]=\"d.sourceEnumValue\">\n                    <option *ngFor=\"let targetEnumValue of d.targetEnumValues\" [ngValue]=\"targetEnumValue\"\n                        [attr.enumvalue]=\"targetEnumValue\">{{ targetEnumValue }}\n                    </option>\n                </select>\n            </div>\n        </div>\n    "}]}],"members":{"outputSelects":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren"},"arguments":["outputSelect"]}]}],"initialize":[{"__symbolic":"method"}],"saveTable":[{"__symbolic":"method"}]}},"ɵs":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"field-edit","template":"\n        <!-- our template for type ahead -->\n        <ng-template #typeaheadTemplate let-model=\"item\" let-index=\"index\">\n            <h5 style=\"font-style:italic;\" *ngIf=\"model['field'].docDef\">{{ model['field'].docDef.name }}</h5>\n            <h5>{{ model['field'].path }}</h5>\n        </ng-template>\n\n        <div class=\"DataMapperEditComponent\">\n            <div class=\"form-group\">\n                <label>Parent</label>\n                <input type=\"text\" [(ngModel)]=\"parentFieldName\" [typeahead]=\"dataSource\"\n                    typeaheadWaitMs=\"200\" (typeaheadOnSelect)=\"parentSelectionChanged($event)\" (blur)=\"handleOnBlur($event)\"\n                    typeaheadOptionField=\"displayName\" [typeaheadItemTemplate]=\"typeaheadTemplate\" disabled=\"{{editMode}}\">\n            </div>\n            <div class=\"form-group\">\n                <label>Name</label>\n                <input name=\"value\" type=\"text\" [(ngModel)]=\"field.name\"/>\n            </div>\n            <div class=\"form-group\" *ngIf=\"docDef.initCfg.type.isXML()\">\n                <label>Namespace</label>\n                <select (change)=\"namespaceSelectionChanged($event);\" [ngModel]=\"namespaceAlias\">\n                    <option *ngFor=\"let ns of namespaces\" value=\"{{ns.alias}}\" [selected]=\"namespaceAlias == ns.alias\">\n                        {{ ns.getPrettyLabel() }}\n                    </option>\n                </select>\n            </div>\n            <div class=\"form-group\" *ngIf=\"docDef.initCfg.type.isXML()\">\n                <label>Field Type</label>\n                <select (change)=\"fieldTypeSelectionChanged($event);\" [ngModel]=\"fieldType\">\n                    <option value=\"element\">Element</option>\n                    <option value=\"attribute\">Attribute</option>\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <label>Value Type</label>\n                <select (change)=\"valueTypeSelectionChanged($event);\" [ngModel]=\"valueType\">\n                    <option value=\"BOOLEAN\">Boolean</option>\n                    <option value=\"BYTE\">Byte</option>\n                    <option value=\"BYTE_ARRAY\">ByteArray</option>\n                    <option value=\"CHAR\">Char</option>\n                    <option value=\"COMPLEX\">Complex</option>\n                    <option value=\"DECIMAL\">Decimal</option>\n                    <option value=\"DOUBLE\">Double</option>\n                    <option value=\"FLOAT\">Float</option>\n                    <option value=\"INTEGER\">Integer</option>\n                    <option value=\"LONG\">Long</option>\n                    <option value=\"SHORT\">Short</option>\n                    <option value=\"STRING\">String</option>\n                    <option value=\"TIME\">Time</option>\n                    <option value=\"DATE\">Date</option>\n                    <option value=\"DATE_TIME\">DateTime</option>\n                    <option value=\"DATE_TZ\">DateTZ</option>\n                    <option value=\"TIME_TZ\">TimeTZ</option>\n                    <option value=\"DATE_TIME_TZ\">DateTimeTZ</option>\n                    <option value=\"UNSIGNED_BYTE\">Unsigned Byte</option>\n                    <option value=\"UNSIGNED_INTEGER\">Unsigned Integer</option>\n                    <option value=\"UNSIGNED_LONG\">Unsigned Long</option>\n                    <option value=\"UNSIGNED_SHORT\">Unsigned Short</option>\n                </select>\n            </div>\n        </div>\n    "}]}],"members":{"__ctor__":[{"__symbolic":"constructor"}],"initialize":[{"__symbolic":"method"}],"handleOnBlur":[{"__symbolic":"method"}],"parentSelectionChanged":[{"__symbolic":"method"}],"fieldTypeSelectionChanged":[{"__symbolic":"method"}],"valueTypeSelectionChanged":[{"__symbolic":"method"}],"namespaceSelectionChanged":[{"__symbolic":"method"}],"executeSearch":[{"__symbolic":"method"}],"getField":[{"__symbolic":"method"}],"isDataValid":[{"__symbolic":"method"}]}},"ɵt":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"namespace-edit","template":"\n        <div class=\"PropertyEditFieldComponent\">\n            <div class=\"form-group\">\n                <label>Alias</label>\n                <input type=\"text\" [(ngModel)]=\"namespace.alias\" disabled=\"{{namespace.isTarget || !namespace.createdByUser}}\">\n            </div>\n            <div class=\"form-group\">\n                <label>URI</label>\n                <input type=\"text\" [(ngModel)]=\"namespace.uri\"/>\n            </div>\n            <div class=\"form-group\">\n                <label>Location URI</label>\n                <input type=\"text\" [(ngModel)]=\"namespace.locationUri\"/>\n            </div>\n            <div class=\"form-group\">\n                <label>Type</label>\n                <input type=\"checkbox\" [ngModel]=\"namespace.isTarget\" style=\"width:20px; vertical-align:middle;\"\n                    disabled=\"{{!targetEnabled}}\" (click)=\"targetToggled()\" />\n                <label [attr.class]=\"(targetEnabled ? '' : 'disabled')\" style=\"width:105px; \">Target Namespace</label>\n                <div class=\"clear\"></div>\n            </div>\n        </div>\n    "}]}],"members":{"initialize":[{"__symbolic":"method"}],"targetToggled":[{"__symbolic":"method"}],"isDataValid":[{"__symbolic":"method"}]}},"ɵu":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"property-field-edit","template":"\n        <div class=\"DataMapperEditComponent\">\n            <div class=\"form-group\">\n                <label>Name:</label>\n                <input name=\"name\" type=\"text\" [(ngModel)]=\"field.name\"/>\n            </div>\n            <div class=\"form-group\">\n                <label>Value:</label>\n                <input name=\"value\" type=\"text\" [(ngModel)]=\"field.value\"/>\n            </div>\n            <div class=\"form-group\">\n                <label>Value Type</label>\n                <select (change)=\"valueTypeSelectionChanged($event);\" [ngModel]=\"valueType\">\n                    <option value=\"BOOLEAN\">Boolean</option>\n                    <option value=\"BYTE\">Byte</option>\n                    <option value=\"BYTE_ARRAY\">ByteArray</option>\n                    <option value=\"CHAR\">Char</option>\n                    <option value=\"COMPLEX\">Complex</option>\n                    <option value=\"DECIMAL\">Decimal</option>\n                    <option value=\"DOUBLE\">Double</option>\n                    <option value=\"FLOAT\">Float</option>\n                    <option value=\"INTEGER\">Integer</option>\n                    <option value=\"LONG\">Long</option>\n                    <option value=\"SHORT\">Short</option>\n                    <option value=\"STRING\">String</option>\n                    <option value=\"TIME\">Time</option>\n                    <option value=\"DATE\">Date</option>\n                    <option value=\"DATE_TIME\">DateTime</option>\n                    <option value=\"DATE_TZ\">DateTZ</option>\n                    <option value=\"TIME_TZ\">TimeTZ</option>\n                    <option value=\"DATE_TIME_TZ\">DateTimeTZ</option>\n                    <option value=\"UNSIGNED_BYTE\">Unsigned Byte</option>\n                    <option value=\"UNSIGNED_INTEGER\">Unsigned Integer</option>\n                    <option value=\"UNSIGNED_LONG\">Unsigned Long</option>\n                    <option value=\"UNSIGNED_SHORT\">Unsigned Short</option>\n                </select>\n            </div>\n        </div>\n    "}]}],"members":{"initialize":[{"__symbolic":"method"}],"valueTypeSelectionChanged":[{"__symbolic":"method"}],"getField":[{"__symbolic":"method"}],"isDataValid":[{"__symbolic":"method"}]}},"ɵv":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"constant-field-edit","template":"\n        <div class=\"DataMapperEditComponent\">\n            <div class=\"form-group\">\n                <label>Value:</label>\n                <input name=\"value\" type=\"text\" [(ngModel)]=\"field.value\"/>\n            </div>\n            <div class=\"form-group\">\n                <label>Value Type</label>\n                <select (change)=\"valueTypeSelectionChanged($event);\" [ngModel]=\"valueType\">\n                    <option value=\"BOOLEAN\">Boolean</option>\n                    <option value=\"BYTE\">Byte</option>\n                    <option value=\"BYTE_ARRAY\">ByteArray</option>\n                    <option value=\"CHAR\">Char</option>\n                    <option value=\"COMPLEX\">Complex</option>\n                    <option value=\"DECIMAL\">Decimal</option>\n                    <option value=\"DOUBLE\">Double</option>\n                    <option value=\"FLOAT\">Float</option>\n                    <option value=\"INTEGER\">Integer</option>\n                    <option value=\"LONG\">Long</option>\n                    <option value=\"SHORT\">Short</option>\n                    <option value=\"STRING\">String</option>\n                    <option value=\"TIME\">Time</option>\n                    <option value=\"DATE\">Date</option>\n                    <option value=\"DATE_TIME\">DateTime</option>\n                    <option value=\"DATE_TZ\">DateTZ</option>\n                    <option value=\"TIME_TZ\">TimeTZ</option>\n                    <option value=\"DATE_TIME_TZ\">DateTimeTZ</option>\n                    <option value=\"UNSIGNED_BYTE\">Unsigned Byte</option>\n                    <option value=\"UNSIGNED_INTEGER\">Unsigned Integer</option>\n                    <option value=\"UNSIGNED_LONG\">Unsigned Long</option>\n                    <option value=\"UNSIGNED_SHORT\">Unsigned Short</option>\n                </select>\n            </div>\n        </div>\n    "}]}],"members":{"initialize":[{"__symbolic":"method"}],"valueTypeSelectionChanged":[{"__symbolic":"method"}],"getField":[{"__symbolic":"method"}],"isDataValid":[{"__symbolic":"method"}]}},"ɵw":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"collapsable-header","template":"\n        <div class=\"CollapsableCardHeader\" (click)=\"handleMouseClick($event)\">\n            <h2 class=\"card-pf-title\"><i [attr.class]=\"getCSSClass()\"></i>{{ title }}</h2>\n        </div>\n    "}]}],"members":{"title":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"collapsed":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"handleMouseClick":[{"__symbolic":"method"}],"getCSSClass":[{"__symbolic":"method"}]}},"ɵx":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"mapping-list-field","template":"\n        <ng-template #tolTemplate>\n            <div class=\"fieldDetailTooltip\" *ngIf=\"displayParentObject()\">\n                <label class=\"parentObjectName\">\n                    <i [attr.class]=\"isSource ? 'fa fa-hdd-o' : 'fa fa-download'\"></i>\n                    {{ getParentObjectName() }}\n                </label>\n                <label>{{ getFieldPath() }}</label>\n                <label *ngIf=\"displayParentObject() && mappedField.field.type\">({{ mappedField.field.type }})</label>\n                <div class=\"clear\"></div>\n            </div>\n        </ng-template>\n\n        <label class=\"fieldPath\" [tooltip]=\"tolTemplate\" placement=\"bottom\" [isDisabled]=\"!displayParentObject()\">\n            {{ getFieldPath() }}\n            <i class=\"fa fa-bolt\" *ngIf=\"mappedField.actions.length != 0\"></i>\n        </label>\n    "}]}],"members":{"mappedField":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"isSource":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"getSourceIconCSSClass":[{"__symbolic":"method"}],"getFieldPath":[{"__symbolic":"method"}],"displayParentObject":[{"__symbolic":"method"}],"getParentObjectName":[{"__symbolic":"method"}]}},"ɵy":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"mapping-list","template":"\n        <div class=\"dataMapperItemList mappingList\">\n            <div class=\"card-pf\">\n                <div class=\"card-pf-heading\">\n                    <h2 class=\"card-pf-title\">\n                        <div class=\"name\">\n                        <i class=\"fa fa-table\"></i>\n                            <label>Mappings</label>\n                        </div>\n                        <i (click)=\"toggleSearch()\" [attr.class]=\"getSearchIconCSSClass()\"></i>\n                        <div class=\"clear\"></div>\n                    </h2>\n                    <div class=\"searchHeaderWrapper\">\n                        <div *ngIf=\"searchMode\" class=\"searchBox\">\n                            <input type=\"text\" #searchFilterBox id=\"search-filter-box\" [(ngModel)]=\"searchFilter\"\n                                (keyup)=\"search(searchFilterBox.value)\" placeholder=\"Search\" />\n                            <i class=\"fa fa-close searchBoxCloseIcon link\" (click)=\"toggleSearch()\"></i>\n                            <div class=\"clear\"></div>\n                        </div>\n                        <div [attr.class]=\"getRowTitleCSSClass()\">\n                            <label class=\"sources\"><i class=\"fa fa-hdd-o\"></i>Sources</label>\n                            <label class=\"targets\"><i class=\"fa fa-download\"></i>Targets</label>\n                            <label class=\"type\"><i class=\"fa fa-sliders\"></i>Type</label>\n                            <div class=\"clear\"></div>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                </div>\n                <div [attr.class]=\"getItemsCSSClass()\">\n                    <div [attr.class]=\"getMappingRowsCSSClass()\">\n                        <div *ngFor=\"let mapping of getMappings(); let index=index;\"\n                            [attr.class]=\"getMappingCSSClass(mapping, index)\" (click)=\"selectMapping(mapping)\">\n                            <div *ngFor=\"let fieldPair of mapping.fieldMappings\" class=\"itemRow\">\n                                <div class=\"sourceFieldNames fieldNames\">\n                                    <mapping-list-field *ngFor=\"let mappedField of getMappedFields(fieldPair, true)\"\n                                        [mappedField]=\"mappedField\" [isSource]=\"true\" [cfg]=\"cfg\"></mapping-list-field>\n                                    <div class=\"clear\"></div>\n                                </div>\n                                <div class=\"targetFieldNames fieldNames\">\n                                    <mapping-list-field *ngFor=\"let mappedField of getMappedFields(fieldPair, false)\"\n                                        [mappedField]=\"mappedField\" [isSource]=\"false\" [cfg]=\"cfg\"></mapping-list-field>\n                                    <div class=\"clear\"></div>\n                                </div>\n                                <div class=\"transition\">\n                                    <label>{{ fieldPair.transition.getPrettyName() }}</label>\n                                    <div class=\"clear\"></div>\n                                </div>\n                                <div class=\"error\">\n                                    <span class=\"pficon pficon-error-circle-o\"\n                                    *ngIf=\"mapping.validationErrors.length\"></span>\n                                </div>\n                                <div class=\"clear\"></div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"noSearchResults\" *ngIf=\"searchResultsVisible()\">\n                        <label>No search results.</label>\n                        <div class=\"clear\"></div>\n                    </div>\n                </div>\n                <div class=\"card-pf-heading itemCount\">{{ cfg.mappings.mappings.length }} mappings</div>\n                <div class=\"clear\"></div>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"getItemsCSSClass":[{"__symbolic":"method"}],"searchResultsVisible":[{"__symbolic":"method"}],"getMappingCSSClass":[{"__symbolic":"method"}],"selectMapping":[{"__symbolic":"method"}],"getRowTitleCSSClass":[{"__symbolic":"method"}],"getMappingRowsCSSClass":[{"__symbolic":"method"}],"getMappings":[{"__symbolic":"method"}],"getMappedFields":[{"__symbolic":"method"}],"toggleSearch":[{"__symbolic":"method"}],"getSearchIconCSSClass":[{"__symbolic":"method"}],"fieldPairMatchesSearch":[{"__symbolic":"method"}],"search":[{"__symbolic":"method"}]}},"ɵz":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"namespace-list","template":"\n        <div class=\"dataMapperItemList namespaceList\">\n            <div class=\"card-pf\">\n                <div class=\"card-pf-heading\">\n                    <h2 class=\"card-pf-title\">\n                        <div class=\"name\">\n                            <i class=\"fa fa-table\"></i>\n                            <label>Namespaces for {{ cfg.getFirstXmlDoc(false).initCfg.shortIdentifier }}</label>\n                        </div>\n                        <i (click)=\"toggleSearch()\" [attr.class]=\"getSearchIconCSSClass()\"></i>\n                        <i (click)=\"addEditNamespace(null, $event)\" class=\"fa fa-plus link\"></i>\n                        <div class=\"clear\"></div>\n                    </h2>\n                    <div class=\"searchHeaderWrapper\">\n                        <div *ngIf=\"searchMode\" class=\"searchBox\">\n                            <input type=\"text\" #searchFilterBox id=\"search-filter-box\" [(ngModel)]=\"searchFilter\"\n                                (keyup)=\"search(searchFilterBox.value)\" placeholder=\"Search\" />\n                            <i class=\"fa fa-close searchBoxCloseIcon link\" (click)=\"toggleSearch()\"></i>\n                            <div class=\"clear\"></div>\n                        </div>\n                        <div [attr.class]=\"getRowTitleCSSClass()\">\n                            <label class=\"alias\">Alias</label>\n                            <label class=\"uri\">Uri</label>\n                            <label class=\"locationUri\">Location URI</label>\n                            <div class=\"clear\"></div>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                </div>\n                <div [attr.class]=\"getItemsCSSClass()\">\n                    <div [attr.class]=\"getRowsCSSClass()\">\n                        <div *ngFor=\"let namespace of getNamespaces(); let index=index;\"\n                            [attr.class]=\"getNamespaceCSSClass(namespace, index)\" (click)=\"selectNamespace(namespace)\">\n                            <label class=\"alias\">{{ namespace.isTarget ? 'Target (tns)' : namespace.alias }}</label>\n                            <label class=\"uri\">{{ namespace.uri }}</label>\n                            <label class=\"locationUri\">{{ namespace.locationUri }}</label>\n                            <div class=\"actions\" style=\"float:right\">\n                                <i class=\"fa fa-edit link\" aria-hidden=\"true\" (click)=\"addEditNamespace(namespace, $event);\"></i>\n                                <i class=\"fa fa-trash link\" aria-hidden=\"true\" (click)=\"removeNamespace(namespace, $event);\"></i>\n                            </div>\n                            <div class=\"clear\"></div>\n                        </div>\n                    </div>\n                    <div class=\"noSearchResults\" *ngIf=\"searchResultsVisible()\">\n                        <label>No search results.</label>\n                        <div class=\"clear\"></div>\n                    </div>\n                </div>\n                <div class=\"card-pf-heading itemCount\">{{ getNamespaces().length }} namespaces</div>\n                <div class=\"clear\"></div>\n            </div>\n        </div>\n    "}]}],"members":{"cfg":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"modalWindow":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"getNamespaceCSSClass":[{"__symbolic":"method"}],"searchResultsVisible":[{"__symbolic":"method"}],"selectNamespace":[{"__symbolic":"method"}],"getItemsCSSClass":[{"__symbolic":"method"}],"getRowTitleCSSClass":[{"__symbolic":"method"}],"getRowsCSSClass":[{"__symbolic":"method"}],"getNamespaces":[{"__symbolic":"method"}],"addEditNamespace":[{"__symbolic":"method"}],"toggleSearch":[{"__symbolic":"method"}],"getSearchIconCSSClass":[{"__symbolic":"method"}],"namespaceMatchesSearch":[{"__symbolic":"method"}],"removeNamespace":[{"__symbolic":"method"}],"search":[{"__symbolic":"method"}]}},"ɵba":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"template-edit","template":"\n        <div class=\"DataMapperEditComponent\">\n            <div class=\"form-group\">\n                <textarea [(ngModel)]=\"templateText\" rows=\"16\" cols=\"100\"></textarea>\n            </div>\n        </div>\n    "}]}],"members":{"isDataValid":[{"__symbolic":"method"}]}}},"origins":{"DataMapperModule":"./src/app/lib/atlasmap-data-mapper/data.mapper.module","ErrorHandlerService":"./src/app/lib/atlasmap-data-mapper/services/error.handler.service","DocumentManagementService":"./src/app/lib/atlasmap-data-mapper/services/document.management.service","MappingManagementService":"./src/app/lib/atlasmap-data-mapper/services/mapping.management.service","InitializationService":"./src/app/lib/atlasmap-data-mapper/services/initialization.service","DocumentDefinition":"./src/app/lib/atlasmap-data-mapper/models/document.definition.model","MappingDefinition":"./src/app/lib/atlasmap-data-mapper/models/mapping.definition.model","ConfigModel":"./src/app/lib/atlasmap-data-mapper/models/config.model","MappingModel":"./src/app/lib/atlasmap-data-mapper/models/mapping.model","MappingSerializer":"./src/app/lib/atlasmap-data-mapper/services/mapping.serializer","DataMapperAppComponent":"./src/app/lib/atlasmap-data-mapper/components/data.mapper.app.component","ɵa":"./src/app/lib/atlasmap-data-mapper/components/document.definition.component","ɵb":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.detail.component","ɵc":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.detail.component","ɵd":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.detail.component","ɵe":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.detail.component","ɵf":"./src/app/lib/atlasmap-data-mapper/components/modal.window.component","ɵg":"./src/app/lib/atlasmap-data-mapper/components/modal.window.component","ɵh":"./src/app/lib/atlasmap-data-mapper/components/data.mapper.example.host.component","ɵi":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.field.action.component","ɵj":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.field.detail.component","ɵk":"./src/app/lib/atlasmap-data-mapper/components/document.field.detail.component","ɵl":"./src/app/lib/atlasmap-data-mapper/components/data.mapper.error.component","ɵm":"./src/app/lib/atlasmap-data-mapper/components/mapping/transition.selection.component","ɵn":"./src/app/lib/atlasmap-data-mapper/components/line.machine.component","ɵo":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.selection.component","ɵp":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.selection.component","ɵq":"./src/app/lib/atlasmap-data-mapper/components/toolbar.component","ɵr":"./src/app/lib/atlasmap-data-mapper/components/mapping/lookup.table.component","ɵs":"./src/app/lib/atlasmap-data-mapper/components/field.edit.component","ɵt":"./src/app/lib/atlasmap-data-mapper/components/namespace.edit.component","ɵu":"./src/app/lib/atlasmap-data-mapper/components/property.field.edit.component","ɵv":"./src/app/lib/atlasmap-data-mapper/components/constant.field.edit.component","ɵw":"./src/app/lib/atlasmap-data-mapper/components/collapsable.header.component","ɵx":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.list.component","ɵy":"./src/app/lib/atlasmap-data-mapper/components/mapping/mapping.list.component","ɵz":"./src/app/lib/atlasmap-data-mapper/components/namespace.list.component","ɵba":"./src/app/lib/atlasmap-data-mapper/components/template.edit.component"},"importAs":"@atlasmap/atlasmap-data-mapper"}