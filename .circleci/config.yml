version: 2
jobs:
  build:
    working_directory: /workspace
    docker:
    - image: wombat7/openjdk-node-docker
    environment:
      MAVEN_OPTS: -Xmx1G
      CHROME_BIN: /usr/bin/chromium
      DOCKER_VERSION: 17.04.0-ce
    branches:
      ignore:
        gh-pages

    steps:
      - setup_remote_docker

      - checkout

      - run:
          name: Install yarn
          command: |
            rm -rf ~/.yarn
            curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.3.2
            echo 'export PATH="${HOME}/.yarn/bin:${PATH}"' >> $BASH_ENV

      - run:
          name: Install Chromium
          command: |
            apt-get update -qq
            apt-get install -qq -y chromium libgconf2-4 libnss3-1d libxss1 libgtk-3-0

      - run:
          name: Prep for Cache Load
          command: |
            find . | grep pom.xml | grep -v src/test/resources | grep -v src/main/resources | sort | xargs cat > all-poms

      - restore_cache:
          key: atlasmap-mvn-{{ checksum "all-poms" }}
      - restore_cache:
          key: atlasmap-yarn-{{ checksum "ui/yarn.lock" }}

      - run:
          name: Build
          command: |
            echo Using node version: $(node --version)
            ./build.sh --batch-mode

      - save_cache:
          key: atlasmap-mvn-{{ checksum "all-poms" }}
          paths:
          - ~/.m2
      - save_cache:
          key: atlasmap-yarn-{{ checksum "ui/yarn.lock" }}
          paths:
          - ~//usr/local/share/.cache/yarn/v1

      - run:
          name: Collect junit reports
          command: |
            mkdir ./junit/ ./junit-ui/
            find . -type f -regex ".*/target/.*-reports/.*xml" -exec cp {} ./junit/ \;
            find ui/junit -type f -regex  ".*xml" -exec cp {} ./junit/ \;

      - run:
          name: Collect checkstyle reports
          command: |
            mkdir ./checkstyle/
            find . -type f -regex "./[runtime|camel].*/target/checkstyle-result.xml" -exec bash -c "cp {} ./checkstyle/\`echo {} | sed -e 's#^\./##' | sed -e 's#/#-#g'\`" \;

      - run:
          name: Collect Coverage reports
          command: |
            mkdir ./coverage/
            cp -a ./runtime/docs/target/site/jacoco-aggregate ./coverage/runtime
            cp -a ./camel/target/site/jacoco ./coverage/camel
            cp -a ./ui/coverage ./coverage/ui

      - store_test_results:
          path: ./junit

      - store_artifacts:
          path: ./junit

      - store_artifacts:
          path: ./checkstyle

      - store_artifacts:
          path: ./coverage

      - deploy:
          command: |
            cd runtime
            if [ "${CIRCLE_PROJECT_USERNAME}" != "atlasmap" ]; then
              exit 0
            fi

            curl -fsSL https://get.docker.com/builds/Linux/x86_64/docker-${DOCKER_VERSION}.tgz | tar xz -C /usr/bin --strip-components 1

            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              DOCKER_IMAGE_TAG="latest"
              cd ../ui
              NPM_TAG=`npm run version|sed '$!d'`.`date '+%Y%m%d%H%M%S'`
              cd ../runtime
            elif [[ "${CIRCLE_TAG}" =~ ^[0-9]+(\.[0-9]+){2} ]]; then
              DOCKER_IMAGE_TAG="${CIRCLE_TAG}"
              NPM_TAG="${CIRCLE_TAG}"
            fi

            if [ -z "${DOCKER_IMAGE_TAG}" ]; then
              exit 0
            fi

            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push atlasmap/atlasmap:${DOCKER_IMAGE_TAG} | cat -

            sh docs/ci-docs.sh

            cd ../ui/dist
            echo "Publishing @atlasmap/atlasmap.data.mapper ${NPM_TAG}..."
            git config --global user.name "AtlasMap CI"
            git config --global user.email "tm.igarashi+atlasmapci@gmail.com"
            npm version ${NPM_TAG}
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish

            cd ..
            java -cp ./.circleci/codacy-coverage-reporter-2.0.1-assembly.jar com.codacy.CodacyCoverageReporter -l Java -r ./coverage/runtime/jacoco.xml
